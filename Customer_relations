import streamlit as st
import sqlite3
import pandas as pd

# Streamlit App Configurations
st.set_page_config(layout="wide")

# Database Functions
def create_database():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT UNIQUE NOT NULL CHECK(LENGTH(contact) = 10 AND contact GLOB '[0-9]*'),
            name TEXT NOT NULL,
            age INTEGER NOT NULL CHECK(age >= 10),
            gender TEXT NOT NULL,
            address TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchase_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT NOT NULL,
            item TEXT NOT NULL,
            quantity INTEGER NOT NULL CHECK(quantity > 0),
            price REAL NOT NULL CHECK(price > 0),
            date TEXT NOT NULL,
            FOREIGN KEY (contact) REFERENCES customers (contact) ON DELETE CASCADE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT NOT NULL,
            rating INTEGER NOT NULL CHECK(rating >= 1 AND rating <= 5),
            suggestion TEXT,
            FOREIGN KEY (contact) REFERENCES customers (contact) ON DELETE CASCADE
        )
    ''')
    conn.commit()
    conn.close()

def add_customer(contact, name, age, gender, address):
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT contact FROM customers WHERE contact = ?', (contact,))
    existing_contact = cursor.fetchone()
    conn.close()

    if existing_contact:
        return False, "📞 Customer with this contact already exists."

    try:
        conn = sqlite3.connect('medical_shop.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO customers (contact, name, age, gender, address) 
            VALUES (?, ?, ?, ?, ?)
        ''', (contact, name, age, gender, address))
        conn.commit()
        return True, "✔️ Customer added successfully!"
    except sqlite3.IntegrityError as e:
        return False, f"❌ Error while adding the customer: {e}"
    finally:
        conn.close()

def view_customers():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT contact, name, age, gender, address FROM customers')
    rows = cursor.fetchall()
    conn.close()
    return rows

def delete_customer(contact):
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM customers WHERE contact = ?', (contact,))
    if cursor.fetchone():
        cursor.execute('DELETE FROM customers WHERE contact = ?', (contact,))
        conn.commit()
        conn.close()
        return True, "✅ Customer deleted successfully!"
    else:
        conn.close()
        return False, "❌ Customer not found."

def delete_all_customers():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM customers')
    conn.commit()
    conn.close()
    return "✅ All customers deleted successfully!"

def view_customer_purchases():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT c.contact, c.name, p.item, p.quantity, p.price, p.date 
        FROM customers c 
        LEFT JOIN purchase_history p 
        ON c.contact = p.contact
    ''')
    rows = cursor.fetchall()
    conn.close()
    return rows

def add_feedback(contact, rating, suggestion):
    try:
        conn = sqlite3.connect('medical_shop.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO feedback (contact, rating, suggestion) 
            VALUES (?, ?, ?)
        ''', (contact, rating, suggestion))
        conn.commit()
        return True, "✔️ Feedback submitted successfully!"
    except sqlite3.IntegrityError as e:
        return False, f"❌ The contact number does not exist in the customers' database: {e}"
    finally:
        conn.close()

def view_feedback():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT contact, rating, suggestion FROM feedback')
    rows = cursor.fetchall()
    conn.close()
    return rows

# Initialize Database
create_database()

# Streamlit App
st.sidebar.title("📋 Navigation")
page = st.sidebar.radio("Go to", ["Customer Management", "View Purchases", "Feedback"])

if page == "Customer Management":
    st.title("👨‍⚕️ Customer Management")

    # Add Customer
    st.header("➕ Add Customer")
    contact = st.text_input("Customer Contact", max_chars=10, key="customer_contact")
    name = st.text_input("Customer Name", key="customer_name")
    age = st.number_input("Customer Age", min_value=10, max_value=100, key="customer_age")
    gender = st.selectbox("Customer Gender", ["Male", "Female", "Other"], key="customer_gender")
    address = st.text_area("Customer Address", key="customer_address")

    if st.button("💾 Add Customer"):
        if contact and name and age and gender:
            success, message = add_customer(contact, name, age, gender, address)
            if success:
                st.success(message)
            else:
                st.error(message)

    # View Customers
    st.header("👀 View Customers")
    customers = view_customers()
    if customers:
        customer_df = pd.DataFrame(customers, columns=["Contact", "Name", "Age", "Gender", "Address"])
        st.dataframe(customer_df)
    else:
        st.info("🧐 No customers found.")

    # Delete Customer
    st.header("🗑️ Delete Customer")
    del_contact = st.text_input("Enter Customer Contact to Delete", max_chars=10)
    if st.button("🗑️ Delete Customer"):
        if del_contact:
            success, message = delete_customer(del_contact)
            if success:
                st.success(message)
            else:
                st.error(message)

    # Delete All Customers
    st.header("🗑️ Delete All Customers")
    if st.button("🗑️ Delete All Customers"):
        message = delete_all_customers()
        st.success(message)

elif page == "View Purchases":
    st.title("🛒 Customer Purchases")

    # View Purchases
    st.header("👀 View Customer Purchases")
    purchases = view_customer_purchases()
    if purchases:
        purchase_df = pd.DataFrame(purchases, columns=["Contact", "Name", "Item", "Quantity", "Price", "Date"])
        st.dataframe(purchase_df)
    else:
        st.info("🧐 No purchase records found.")

elif page == "Feedback":
    st.title("💬 Customer Feedback")

    # Add Feedback
    st.header("📝 Submit Feedback")
    feedback_contact = st.text_input("Customer Contact", max_chars=10, key="feedback_contact")
    rating = st.slider("How was your shopping experience?", min_value=1, max_value=5, step=1, key="feedback_rating")
    suggestion = st.text_area("Any suggestions for us?", key="feedback_suggestion")

    if st.button("💾 Submit Feedback"):
        if feedback_contact and rating:
            success, message = add_feedback(feedback_contact, rating, suggestion)
            if success:
                st.success(message)
            else:
                st.error(message)

    # View Feedback
    st.header("👀 View Feedback")
    feedbacks = view_feedback()
    if feedbacks:
        feedback_df = pd.DataFrame(feedbacks, columns=["Contact", "Rating", "Suggestion"])
        st.dataframe(feedback_df)
    else:
        st.info("🧐 No feedback records found.")
