import streamlit as st
import sqlite3
import pandas as pd

# Streamlit App Configurations
st.set_page_config(layout="wide")  # Makes the layout wider

# Database Functions
def create_database():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT UNIQUE NOT NULL CHECK(LENGTH(contact) = 10 AND contact GLOB '[0-9]*'),
            name TEXT NOT NULL,
            age INTEGER NOT NULL CHECK(age >= 10),
            gender TEXT NOT NULL,
            address TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS purchase_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT NOT NULL,
            item TEXT NOT NULL,
            quantity INTEGER NOT NULL CHECK(quantity > 0),
            price REAL NOT NULL CHECK(price > 0),
            date TEXT NOT NULL,
            FOREIGN KEY (contact) REFERENCES customers (contact) ON DELETE CASCADE
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            contact TEXT NOT NULL,
            feedback TEXT NOT NULL,
            FOREIGN KEY (contact) REFERENCES customers (contact) ON DELETE CASCADE
        )
    ''')
    conn.commit()
    conn.close()

def add_customer(contact, name, age, gender, address):
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT contact FROM customers WHERE contact = ?', (contact,))
    existing_contact = cursor.fetchone()
    conn.close()

    if existing_contact:
        return False, "📞 Customer with this contact already exists."
    
    try:
        conn = sqlite3.connect('medical_shop.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO customers (contact, name, age, gender, address) 
            VALUES (?, ?, ?, ?, ?)
        ''', (contact, name, age, gender, address))
        conn.commit()
        return True, "✔️ Customer added successfully!"
    except sqlite3.IntegrityError:
        return False, "❌ Error while adding the customer."
    finally:
        conn.close()

def view_customers():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT contact, name, age, gender, address FROM customers')
    rows = cursor.fetchall()
    conn.close()
    return rows

def delete_customer(contact):
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM customers WHERE contact = ?', (contact,))
    if cursor.fetchone():
        cursor.execute('DELETE FROM customers WHERE contact = ?', (contact,))
        conn.commit()
        conn.close()
        return True, "✅ Customer deleted successfully!"
    else:
        conn.close()
        return False, "❌ Customer not found."

def add_purchase(contact, item, quantity, price, date):
    discount = 0
    total_price = quantity * price
    if total_price > 5000:
        discount = total_price * 0.1  # 10% discount for purchases over 5000

    if total_price > 10000:
        discount += total_price * 0.05  # Additional 5% discount for purchases above 10000

    final_price = total_price - discount
    try:
        conn = sqlite3.connect('medical_shop.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO purchase_history (contact, item, quantity, price, date) 
            VALUES (?, ?, ?, ?, ?)
        ''', (contact, item, quantity, price, date))
        conn.commit()
        return True, f"✔️ Purchase record added successfully! {'Discount applied: ₹' + str(discount) if discount > 0 else ''} Total Price: ₹{final_price:.2f}"
    except sqlite3.IntegrityError:
        return False, "❌ The contact number does not exist in the customers' database."
    finally:
        conn.close()

def view_purchase_history():
    conn = sqlite3.connect('medical_shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT contact, item, quantity, price, date
        FROM purchase_history
    ''')
    rows = cursor.fetchall()
    conn.close()
    return rows

# Initialize Database
create_database()

# Streamlit App
st.sidebar.title("📋 Navigation")
page = st.sidebar.radio("Go to", ["Customer Management", "Purchase History"])

if page == "Customer Management":
    st.title("👨‍⚕️ Customer Management")

    # Add Customer
    st.header("➕ Add Customer")
    contact = st.text_input("Customer Contact", max_chars=10, key="customer_contact")
    name = st.text_input("Customer Name", key="customer_name")
    age = st.number_input("Customer Age", min_value=10, max_value=100, key="customer_age")
    gender = st.selectbox("Customer Gender", ["Male", "Female", "Other"], key="customer_gender")
    address = st.text_area("Customer Address", key="customer_address")

    if st.button("💾 Add Customer"):
        if contact and name and age and gender:
            success, message = add_customer(contact, name, age, gender, address)
            if success:
                st.success(message)
            else:
                st.error(message)

    # View Customers
    st.header("👀 View Customers")
    customers = view_customers()
    if customers:
        customer_df = pd.DataFrame(customers, columns=["Contact", "Name", "Age", "Gender", "Address"])

        # Use wide columns for better layout
        col1, col2 = st.columns([2, 1])  # The first column is wider
        with col1:
            st.dataframe(customer_df)

    else:
        st.info("🧐 No customers found.")

    # Delete Customer
    st.header("🗑️ Delete Customer")
    del_contact = st.text_input("Enter Customer Contact to Delete", max_chars=10)
    if st.button("🗑️ Delete Customer"):
        if del_contact:
            success, message = delete_customer(del_contact)
            if success:
                st.success(message)
            else:
                st.error(message)

elif page == "Purchase History":
    st.title("🛒 Purchase History Management")

    # Tabs for Navigation
    tab1, tab2 = st.tabs(["➕ Add Purchase", "📝 View Purchase History"])

    # Tab 1: Add Purchase
    with tab1:
        st.header("🛒 Add Purchase Records")
        contact = st.text_input("Customer Contact", max_chars=10, key="add_purchase_contact")
        item = st.text_input("Item Name")
        quantity = st.number_input("Quantity", min_value=1, step=1)
        price = st.number_input("Price", min_value=0.01, step=0.01, format="%.2f")
        date = st.date_input("Purchase Date")

        if st.button("💾 Add Purchase"):
            if contact and item:
                success, message = add_purchase(contact, item, quantity, price, str(date))
                if success:
                    st.success(message)
                else:
                    st.error(message)

    # Tab 2: View Purchase History - Grouped by Contact
    with tab2:
        st.header("📝 Purchase History")

        # Fetch purchase data from database
        purchases = view_purchase_history()

        if purchases:
            # Convert to DataFrame for better visualization
            purchase_df = pd.DataFrame(purchases, columns=["Contact", "Item", "Quantity", "Price", "Date"])

            # Grouping purchases by contact
            grouped_purchase_df = purchase_df.groupby("Contact").agg({
                "Item": lambda x: ", ".join(x),
                "Quantity": "sum",
                "Price": "sum",
                "Date": lambda x: ", ".join(x)
            }).reset_index()

            # Format Price as currency
            grouped_purchase_df['Price'] = grouped_purchase_df['Price'].apply(lambda x: f"₹{x:.2f}")
            grouped_purchase_df['Quantity'] = grouped_purchase_df['Quantity'].astype(int)

            # Use wide columns for better layout
            col1, col2 = st.columns([2, 1])  # The first column is wider
            with col1:
                st.dataframe(grouped_purchase_df)

        else:
            st.info("🧐 No purchase records found.")
