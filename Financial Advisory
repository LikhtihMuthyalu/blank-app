import streamlit as st
import pandas as pd
import sqlite3

# Database connection
conn = sqlite3.connect("FA.db", check_same_thread=False)
c = conn.cursor()

# Create table if not exists
c.execute('''CREATE TABLE IF NOT EXISTS inventory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                company TEXT,
                product_name TEXT,
                product_description TEXT,
                usage TEXT,
                manufacture_date TEXT,
                expiry_date TEXT,
                date_of_purchase TEXT,
                next_stock_purchase TEXT,
                selling_price REAL,
                purchase_price REAL,
                sales_quantity INTEGER,
                purchase_quantity INTEGER,
                date_of_sale TEXT,
                amount_paid REAL,
                due_amount REAL
            )''')
conn.commit()

# Load data from SQLite
def load_data():
    df = pd.read_sql_query("SELECT * FROM inventory", conn)
    df["manufacture_date"] = pd.to_datetime(df["manufacture_date"])
    df["expiry_date"] = pd.to_datetime(df["expiry_date"])
    df["date_of_purchase"] = pd.to_datetime(df["date_of_purchase"])
    df["next_stock_purchase"] = pd.to_datetime(df["next_stock_purchase"])
    df["date_of_sale"] = pd.to_datetime(df["date_of_sale"])
    return df

df = load_data()

# Streamlit UI
st.title("Pharmacy Financial Advisory Module")

# Form to enter new product details
st.header("Enter New Product Details")
with st.form("product_form"):
    company = st.text_input("Company")
    product_name = st.text_input("Product Name")
    product_description = st.text_area("Product Description")
    usage = st.text_area("Usage")
    manufacture_date = st.date_input("Manufacture Date")
    expiry_date = st.date_input("Expiry Date")
    date_of_purchase = st.date_input("Date of Purchase")
    next_stock_purchase = st.date_input("Next Stock Purchase")
    selling_price = st.number_input("Selling Price", min_value=0.0)
    purchase_price = st.number_input("Purchase Price", min_value=0.0)
    sales_quantity = st.number_input("Sales Quantity", min_value=0, step=1)
    purchase_quantity = st.number_input("Purchase Quantity", min_value=0, step=1)
    date_of_sale = st.date_input("Date of Sale")
    amount_paid = st.number_input("Amount Paid", min_value=0.0)
    due_amount = st.number_input("Due Amount", min_value=0.0)
    submit_button = st.form_submit_button("Add Product")

    if submit_button:
        c.execute('''INSERT INTO inventory (company, product_name, product_description, usage, manufacture_date, expiry_date, 
                    date_of_purchase, next_stock_purchase, selling_price, purchase_price, sales_quantity, purchase_quantity, date_of_sale, amount_paid, due_amount) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                  (company, product_name, product_description, usage, manufacture_date, expiry_date, date_of_purchase, 
                   next_stock_purchase, selling_price, purchase_price, sales_quantity, purchase_quantity, date_of_sale, amount_paid, due_amount))
        conn.commit()
        st.success("Product added successfully!")

# Reload data
df = load_data()

# Sales Report
st.header("Company-wise Sales Report")
company_sales = df.groupby("company")["sales_quantity"].sum()
st.bar_chart(company_sales)

# Products under each company
st.header("Products by Company")
for company, group in df.groupby("company"):
    st.subheader(company)
    st.write(group[["product_name", "product_description", "usage", "selling_price", "purchase_price", "amount_paid", "due_amount"]])

# Product-wise Sales and Purchase Report
st.header("Product-wise Sales and Purchase Report")
product_sales = df.groupby("product_name")["sales_quantity"].sum()
product_purchases = df.groupby("product_name")["purchase_quantity"].sum()

st.subheader("Sales per Product")
st.bar_chart(product_sales)

st.subheader("Purchases per Product")
st.bar_chart(product_purchases)

# Most Selling Product
st.header("Most Selling Product")
if not df.empty:
    most_selling_product = df.loc[df["sales_quantity"].idxmax(), ["product_name", "sales_quantity"]]
    st.write(most_selling_product)

# Product in Demand During a Specific Time Period
st.header("Product in Demand During a Specific Time Period")
if df["date_of_sale"].notna().sum() > 0:  # Check if there are valid dates
    selected_start_date = st.date_input("Select Start Date", df["date_of_sale"].dropna().min())
    selected_end_date = st.date_input("Select End Date", df["date_of_sale"].dropna().max())
else:
    selected_start_date = st.date_input("Select Start Date", pd.to_datetime("2024-01-01"))
    selected_end_date = st.date_input("Select End Date", pd.to_datetime("2024-12-31"))

demand_df = df[(df["date_of_sale"] >= pd.to_datetime(selected_start_date)) & (df["date_of_sale"] <= pd.to_datetime(selected_end_date))]
if not demand_df.empty:
    most_demanded_product = demand_df.groupby("product_name")["sales_quantity"].sum().idxmax()
    st.write(f"Most Demanded Product: {most_demanded_product}")

# Sales Reports
st.header("Sales Reports")
df["sale_year"] = df["date_of_sale"].dt.year
df["sale_week"] = df["date_of_sale"].dt.isocalendar().week
df["sale_day"] = df["date_of_sale"].dt.date

sales_daily = df.groupby("sale_day")["sales_quantity"].sum()
sales_weekly = df.groupby("sale_week")["sales_quantity"].sum()
sales_yearly = df.groupby("sale_year")["sales_quantity"].sum()

st.subheader("Daily Sales")
st.bar_chart(sales_daily)

st.subheader("Weekly Sales")
st.bar_chart(sales_weekly)

st.subheader("Yearly Sales")
st.bar_chart(sales_yearly)

# Stock Information
st.header("Stock Information")
st.write(df[["company", "product_name", "manufacture_date", "expiry_date", "date_of_purchase", "next_stock_purchase"]])

# Selling Price and Purchase Price
st.header("Selling and Purchase Prices")
price_data = df.groupby("company")[["selling_price", "purchase_price"]].mean()
st.bar_chart(price_data)

# Profit Analysis
st.header("Profit Analysis")
df["profit_per_unit"] = df["selling_price"] - df["purchase_price"]
df["total_profit"] = df["profit_per_unit"] * df["sales_quantity"]
profit_by_company = df.groupby("company")["total_profit"].sum()
st.bar_chart(profit_by_company)
