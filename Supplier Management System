import streamlit as st
import sqlite3
import pandas as pd
from fpdf import FPDF
import os

# Database connection
conn = sqlite3.connect("supplier_management.db", check_same_thread=False)
c = conn.cursor()

# Create tables if they do not exist
with conn:
    c.execute('''CREATE TABLE IF NOT EXISTS suppliers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    contact TEXT,
                    pricing TEXT,
                    products TEXT,
                    address TEXT
                )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS purchase_orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    supplier_name TEXT,
                    order_date TEXT,
                    expected_delivery TEXT,
                    actual_delivery TEXT,
                    status TEXT,
                    lead_time INTEGER
                )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS invoices (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    order_id INTEGER,
                    supplier_name TEXT,
                    supplier_address TEXT,
                    invoice_date TEXT,
                    subtotal REAL,
                    tax REAL,
                    tax_amount REAL,
                    discount REAL,
                    shipping REAL,
                    total REAL,
                    payment_status TEXT
                )''')

def add_supplier():
    with st.form("add_supplier_form"):
        name = st.text_input("Supplier Name")
        contact = st.text_input("Contact Info")
        pricing = st.text_area("Pricing Terms")
        products = st.text_area("Products Supplied (comma-separated)")
        address = st.text_area("Supplier Address")
        submit = st.form_submit_button("Add Supplier")
        
        if submit:
            if name and contact and address:
                with conn:
                    c.execute("INSERT INTO suppliers (name, contact, pricing, products, address) VALUES (?, ?, ?, ?, ?)",
                              (name, contact, pricing, products, address))
                st.success(f"Supplier '{name}' added successfully!")
            else:
                st.error("Supplier Name, Contact, and Address are required fields.")

def add_purchase_order():
    suppliers_df = pd.read_sql("SELECT name FROM suppliers", conn)
    supplier_names = suppliers_df['name'].tolist()
    
    if supplier_names:
        selected_supplier = st.selectbox("Select Supplier", supplier_names)
        order_date = st.date_input("Order Date")
        expected_delivery = st.date_input("Expected Delivery Date")
        order_status = st.selectbox("Order Status", ["Pending", "Shipped", "Delivered"])
        
        if st.button("Save Purchase Order"):
            lead_time = (expected_delivery - order_date).days
            with conn:
                c.execute("INSERT INTO purchase_orders (supplier_name, order_date, expected_delivery, actual_delivery, status, lead_time) VALUES (?, ?, ?, ?, ?, ?)",
                          (selected_supplier, order_date, expected_delivery, None, order_status, lead_time))
            st.success("Purchase Order added successfully!")
    else:
        st.warning("No suppliers available. Please add a supplier first.")

def generate_invoice_id():
    c.execute("SELECT COUNT(*) FROM invoices")
    count = c.fetchone()[0]
    return f"INV-{2025000 + count + 1}"

def create_invoice_pdf(invoice_id, supplier_name, supplier_address, invoice_date, subtotal, tax_amount, discount, shipping, total, payment_status):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, "Invoice", ln=True, align="C")
    pdf.ln(10)
    
    pdf.set_font("Arial", "", 12)
    pdf.cell(100, 10, f"Invoice No: {invoice_id}")
    pdf.cell(100, 10, f"Invoice Date: {invoice_date}", ln=True)
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 12)
    pdf.cell(100, 10, "From: Sri Sai Balaji Medical & General Stores")
    pdf.cell(100, 10, "Bill To:", ln=True)
    pdf.set_font("Arial", "", 12)
    pdf.cell(100, 10, "#55/2, 1st Main Rd, Sudhama Nagar, Bengaluru, Karnataka 560027")
    pdf.cell(100, 10, supplier_name, ln=True)
    pdf.cell(100, 10, supplier_address, ln=True)
    pdf.ln(10)
    
    pdf.ln(5)
    pdf.cell(200, 10, f"Subtotal: {subtotal:.2f}", ln=True)
    pdf.cell(200, 10, f"Tax Amount: {tax_amount:.2f}", ln=True)
    pdf.cell(200, 10, f"Discount: {discount:.2f}", ln=True)
    pdf.cell(200, 10, f"Shipping Cost: {shipping:.2f}", ln=True)
    pdf.cell(200, 10, f"Total Amount: {total:.2f}", ln=True)
    pdf.cell(200, 10, f"Payment Status: {payment_status}", ln=True)
    
    pdf_output = f"invoice_{invoice_id}.pdf"
    pdf.output(pdf_output)
    return pdf_output

def add_invoice():
    st.subheader("ðŸ§¾ Generate Invoice")
    purchase_orders_df = pd.read_sql("SELECT id, supplier_name FROM purchase_orders", conn)
    
    if purchase_orders_df.empty:
        st.warning("No purchase orders available. Please add one first.")
        return
    
    selected_order_id = st.selectbox("Select Purchase Order", purchase_orders_df["id"].tolist())
    supplier_info = purchase_orders_df[purchase_orders_df["id"] == selected_order_id].iloc[0]
    supplier_name = supplier_info["supplier_name"]
    supplier_address = pd.read_sql(f"SELECT address FROM suppliers WHERE name='{supplier_name}'", conn)["address"][0]
    invoice_date = st.date_input("Invoice Date")
    subtotal = st.number_input("Subtotal", min_value=0.0, format="%.2f")
    tax = st.number_input("Tax Percentage", min_value=0.0, format="%.2f")
    tax_amount = (subtotal * tax) / 100
    discount = st.number_input("Discount", min_value=0.0, format="%.2f")
    shipping = st.number_input("Shipping Cost", min_value=0.0, format="%.2f")
    total = subtotal + tax_amount - discount + shipping
    payment_status = st.selectbox("Payment Status", ["Pending", "Paid"])
    
    if st.button("Generate Invoice"):
        invoice_id = generate_invoice_id()
        pdf_file = create_invoice_pdf(invoice_id, supplier_name, supplier_address, invoice_date, subtotal, tax_amount, discount, shipping, total, payment_status)
        st.success(f"Invoice {invoice_id} generated successfully!")
        with open(pdf_file, "rb") as file:
            st.download_button(label="Download Invoice", data=file, file_name=pdf_file, mime="application/pdf")
        os.remove(pdf_file)

def main():
    st.title("Supplier Management System with SQLite")
    tabs = st.tabs(["View Suppliers", "Add Supplier", "Add Purchase Order", "Generate Invoice"])
    with tabs[0]: st.subheader("ðŸ“‹ View Suppliers")
    with tabs[1]: add_supplier()
    with tabs[2]: add_purchase_order()
    with tabs[3]: add_invoice()

if __name__ == "__main__":
    main()
